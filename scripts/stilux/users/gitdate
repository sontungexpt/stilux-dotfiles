#!/bin/bash
# The scripts is written by Tran Vo Son Tung
# The scripts is use to change the date of git commit to the date of the file
# Dependencies: git
# Version: 1.0.0

VERSION="1.0.0"

# GLOBAL COLOR
NO='\033[0m' # No Color
BLUE='\033[1;34m'
RED='\033[1;31m'
GREEN='\033[1;32m'
YELLOW='\033[1;33m'

display_help() {
	echo -e "${BLUE}INFORMATION:${NO}"
	echo "  This scripts is written by Tran Vo Son Tung"
	echo "  This script is use to change the date of git commit to the date of the file"
	echo "  Dependencies: git"
	echo "  Version: $VERSION"

	echo -e "\n${BLUE}USAGE:${NO}"
	echo "  gitdate [COMMAND] [OPTIONS]"

	echo -e "\n${GREEN}init:${NO} Init a git repository. This command is the same as git init."
	echo "  gitdate init"
	echo -e "\n${GREEN}add:${NO} Add a file to git repository. This command is the same as git add"
	echo "  gitdate add [files]"
	echo "  gitdate add ."

	echo -e "\n${GREEN}commit:${NO}  Commit a file to git repository with the specific date"
	echo "  gitdate commit [date] [message]"

	echo -e "\n  ${BLUE}[NOTE]${NO}: You can use flag -m or -d to specify the date or message"
	echo "  gitdate commit -m [message] 			# Commit with current date"
	echo "  gitdate commit -m [message] [date]"
	echo "  gitdate commit [date] -m [message]"
	echo "  gitdate commit -d [date] [message]"
	echo "  gitdate commit [message] -d [date]"
	echo "  gitdate commit -m [message] -d [date]"
	echo "  gitdate commit -d [date] -m [message]"

	echo -e "\n${GREEN}push:${NO} Push a file to git repository"
	echo -e "  gitdate push                     # Push current branch to current remote"
	echo -e "  gitdate push [branch]            # Push current branch to current remote with specific branch name"
	echo -e "  gitdate push [remote] [branch]   # Push current branch to specific remote with specific branch name"

	echo -e "\n${GREEN}status:${NO} Show the status of git repository. This command is the same as git status"
	echo "  gitdate status"

	echo -e "\n${GREEN}checkout:${NO} Checkout a branch of git repository. This command is the same as git checkout"
	echo "  gitdate checkout [branch]"

	echo -e "\n${GREEN}branch:${NO} Show the branch of git repository. This command is the same as git branch"
	echo "  gitdate branch"

	echo -e "\n${GREEN}conf:${NO} Config global name and email"
	echo "  gitdate conf                        # Config name and email for all repository"
	echo "  gitdate conf [name] [email]         # Config name and email for current repository"

	#many more commands same as git
	echo -e "\n${GREEN}There are also many other commands like Git that you can use.${NO}"
	echo "  gitdate [command]"

	echo -e "\n${BLUE}OPTIONS: ${NO}"
	echo "  -h, --help		Display this help and exit"
	echo "  -v, --version		Display version information and exit"

	echo -e "\n${BLUE}EXAMPLES: ${NO}"
	echo "  gitdate init"
	echo "  gitdate add ."
	echo "  gitdate commit \"2020-01-01 12:00:00\" \"Add README.md\""
	echo "  gitdate push main"
	echo "  gitdate push origin main"
	echo "  gitdate push -u origin main"
	echo "  gitdate status"
	echo "  gitdate checkout main"
	echo "  gitdate branch"
	echo "  gitdate conf \"Tran Vo Son Tung\" \"tungtran@gmail.com\""
	echo "  gitdate conf"
	echo "  gitdate -h"
	echo "  gitdate -v"
	exit 0
}

display_version() {
	echo -e "gitdate version ${GREEN}$VERSION${NO}"
	exit 0
}

is_inside_git() {
	if ! git rev-parse --show-toplevel >/dev/null 2>&1; then
		echo -e "${RED}[ERROR]:${NO} Not inside a git repository\n"
		return 1
	else
		return 0
	fi
}

init() {
	if is_inside_git >/dev/null 2>&1; then
		echo -e "${YELLOW}[WARNING]:${NO} Already inside a git repository\n"
		exit 1
	else
		git init
		echo -e "${GREEN}Initialized git repository${NO}"
		exit 0
	fi
}

add() {
	if ! is_inside_git; then
		exit 1
	fi

	if [ $# -eq 0 ]; then
		echo -e "${RED}Error:${NO} No files provided\n"
		exit 1
	fi

	git add "$@"
	exit 0
}

commit_with_date_message() {
	git commit --date="$1" -m "$2" && git filter-branch --env-filter 'export GIT_COMMITTER_DATE="$GIT_AUTHOR_DATE"' -f
	exit 0
}

print_error() {
	echo -e "${RED}[ERROR]: $1${NO}"
	echo "Use gitdate -h or --help to see help"
	exit 1
}

commit() {
	if ! is_inside_git; then
		exit 1
	fi

	local date
	local message

	case "$#" in
	2)
		# gitdate commit [date] [message]
		if [ "$1" == "-m" ]; then
			git commit -m "$1"
			exit 0
		fi
		date=$1
		message=$2
		;;
	3)
		if [ "$1" == "-m" ] && [ "$2" != '-d' ]; then
			# gitdate commit -m [message] [date]
			date=$3
			message=$2
		elif [ "$1" == "-d" ] && [ "$2" != "-m" ]; then
			# gitdate commit -d [date] [message]
			date=$2
			message=$3
		elif [ "$2" == "-m" ]; then
			# gitdate commit [date] -m [message]
			date=$1
			message=$3
		elif [ "$2" == "-d" ]; then
			# gitdate commit [message] -d [date]
			date=$3
			message=$1
		else
			print_error "Invalid argruments."
		fi
		;;
	4)
		# gitdate commit -d [date] -m [message]
		# or gitdate commit -m [message] -d [date]
		if [ "$1" == "-m" ] && [ "$3" == "-d" ]; then
			message=$2
			date=$4
		elif [ "$1" == "-d" ] && [ "$3" == "-m" ]; then
			date=$2
			message=$4
		else
			print_error "Invalid argruments."
		fi
		;;
	*)
		print_error "Invalid argruments."
		;;
	esac

	commit_with_date_message "$date" "$message"
}

push() {
	if ! is_inside_git; then
		exit 1
	fi

	case "$#" in
	0)
		# gitdate push
		curr_branch=$(git rev-parse --abbrev-ref HEAD)
		curr_remote=$(git remote -v | awk '$1=="origin" && /fetch/ {print $2}')
		git push -u "$curr_remote" "$curr_branch"
		;;
	1)
		if [[ "$1" == "-?"* ]]; then
			# gitdate push -f
			git push "$@"
			exit 0
		fi

		# gitdate push [branch]
		curr_remote=$(git remote -v | awk '$1=="origin" && /fetch/ {print $2}')
		git push -u "$curr_remote" "$1"
		;;

	2)
		# gitdate push [remote] [branch]
		git push -u "$1" "$2"
		;;

	*)
		git push "$@"
		;;

	esac
	exit 0
}

conf() {
	case "$#" in
	0)
		read -r -p "Enter your name: " name
		git config --global user.name "$name"
		read -r -p "Enter your email: " email
		git config --global user.email "$email"
		exit 0
		;;
	2)
		#git conf [name] [email]
		if ! is_inside_git; then
			exit 1
		fi
		git config user.name "$1"
		git config user.email "$2"
		exit 0
		;;
	*)
		print_error "Invalid argruments."
		;;
	esac
}

# main
# check dependencies
if [ ! -x "$(command -v git)" ]; then
	echo -e "${RED}[ERROR]: git is not installed, please install git to use this script${NO}"
	echo "Use gitdate -h or --help to see help"
	exit 1
fi

if [ "$#" -eq 0 ]; then
	display_help
fi

# main
case $1 in
-h | --help)
	display_help
	;;
-v | --version)
	display_version
	;;
init)
	init
	;;
add)
	shift
	add "$@"
	;;
commit)
	shift
	commit "$@"
	;;
push)
	shift
	push "$@"
	;;
conf)
	shift
	conf "$@"
	;;
*)
	git "$@"
	;;
esac
