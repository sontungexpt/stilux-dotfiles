set previewer ~/.config/lf/lf-kitty/lf_kitty_preview
set cleaner ~/.config/lf/lf-kitty/lf_kitty_clean
#set cleaner ~/.config/lf/lfimg/cleaner
#set previewer ~/.config/lf/lfimg/preview

set ratios 1:2:3
set icons true
set preview true
set hidden true
set drawbox true
set ignorecase true
set shellopts '-eu'
set ifs "\n"
set scrolloff 10

# Remove some defaults mappings
map m
map o
map "'"
map '"'
map d
map c
map e
map f
map w
map y

# Keybindings
# Delete and Trash
map dd trash
map DD delete
map <delete> trash

# Copy and Paste
map p paste
map x cut
map yy copy
map yp copypath
map yn copyfilename

# Create file and directory
map mf mkfile
map mr sudomkfile
map ms create_script_form
map md mkdir

map ch chmod
map bg setwallpaper
map sa setavatar
map r rename
map gg top
map G bottom
map R reload
map C clear
map so sudoopen
map o open
map <enter> shell
map O nvim
map T thunar

# Select a file
map <space> :toggle; down
map U unselect
map u unselect

# Movement Keybindings
map gc cd ~/.config
map gd cd ~/Data
map gld cd ~/Documents
map gw cd ~/Data/Workspace
map gu cd ~/Data/UIT
map gp cd ~/Pictures
map gD cd ~/Downloads
map gb cd /usr/bin
map gv cd ~/.config/nvim
map gV cd ~/Videos
map gs cd ~/scripts

# Archive Keybindings
map z zip
map t tar
map A achirve
map e extract

cmd create_script_form %{{
  create_form(){
    path="$HOME/scripts/stilux/users/$1"

    # check if the file exists
    if [ -f "$path" ]; then
      printf "Script file already exists."
    else
      touch "$path"
      chmod +x "$path"
      echo "#!/bin/bash" >> "$path"
	    echo "# The scripts is written by TranVoSonTung" >> "$path"
	    echo "FLAG=\"--nopass\"" >> "$path"
	    echo "PASS=\"\"" >> "$path"
	    echo -e "\n# Use eval \"\$SUDO_COMMAND <Your command>\" to exec the command with no password" >> "$path"
	    echo "SUDO_COMMAND=\"echo \\\"\$PASS\\\" | sudo -S -k\"" >> "$path"
	    echo "" >> "$path"
	    echo "NO=\"\\033[0m\"" >> "$path"
	    echo "RED=\"\\033[1;31m\"" >> "$path"
	    echo "GREEN=\"\\033[1;32m\"" >> "$path"
	    echo "YELLOW=\"\\033[1;33m\"" >> "$path"
	    echo -e "\nif [ \"\$FLAG\" = \"\$1\" ] && [ \"\$PASS\" != \"\" ]; then" >> "$path"
	    echo "	# The scripts when  use flag \"--nopass\"" >> "$path"
	    echo "	echo \"\$2\"" >> "$path"
	    echo "else" >> "$path"
	    echo "	# The scripts when not use flag \"--nopass\"" >> "$path"
	    echo "	echo \"\$2\"" >> "$path"
	    echo "fi" >> "$path"

      kitty -e "$EDITOR" "$path"
    fi
  }
  printf "File Name: "
  read -r filename
  lf -remote 'send reload'
  create_form "$filename"
}}

# Open file with neovim
cmd nvim ${{
  nvim "$f"
}}

# Custom Functions
# Copy Path Command
cmd copypath ${{
  echo -n "$f" | xclip -selection "clipboard" && [ -x "$(command -v dunstify)" ] && dunstify "Copied file path: $f"
}}

# Copy File Name Command
cmd copyfilename ${{
  echo -n $(basename "$f") | xclip -selection "clipboard" && [ -x "$(command -v dunstify)" ] && dunstify "Copied file name: $(basename "$f")"
}}

# Open the path in thunar
cmd thunar %{{
  thunar "$f"
}}

# Sudo Open Command
cmd sudoopen ${{
  open_pdf() {
    if [ ! -f "/usr/bin/microsoft-edge-stable" ]; then
      sudo xdg-open "$1" >> /dev/null 2>&1 & disown
    else
      sudo microsoft-edge-stable "$1" >> /dev/null 2>&1 & disown
    fi
  }

  open_with_nvim() {
    if [ ! -f "usr/bin/nvim" ]; then
      sudo $EDITOR "$1"
    else
      sudo nvim "$1"
    fi
  }

  case $(file --mime-type "$f" -bL) in
    text/*|application/json|application/javascript|inode/x-empty|application/octet-stream) open_with_nvim "$f";;
    application/pdf) open_pdf "$f";;
    image/*)sudo feh --auto-zoom --scale-down "$f" >> /dev/null 2>&1 & disown;;
    *)sudo xdg-open "$f" >> /dev/null 2>&1  & disown;;
  esac
}}

# Open Command
cmd open ${{
  open_pdf() {
    if [ ! -f "/usr/bin/microsoft-edge-stable" ]; then
      xdg-open "$1" >> /dev/null 2>&1 & disown
    else
      microsoft-edge-stable "$1" >> /dev/null 2>&1 & disown
    fi
  }

  open_with_nvim() {
    if [ ! -f "usr/bin/nvim" ]; then
      $EDITOR "$1"
    else
      nvim "$1"
    fi
  }

  case $(file --mime-type "$f" -bL) in
    text/*|application/json|application/javascript|inode/x-empty|application/octet-stream) open_with_nvim "$f";;
    application/pdf) open_pdf "$f";;
    image/*) feh --auto-zoom --scale-down "$f" >> /dev/null 2>&1 & disown;;
    *) xdg-open "$f" >> /dev/null 2>&1 & disown;;
  esac

}}

# Set Background Command
cmd setwallpaper ${{
  if command -v setbg &>/dev/null; then
    setbg "$f" --no-fehbg
  else
    cp "$f" ~/.config/wallpaper/wallpaper.jpg && i3 restart && cp "$f" ${XDG_DATA_HOME:-$HOME/.local/share}/$USER/wallpaper/lockscreen.png
  fi
}}


# Change The Avatar Command
cmd setavatar ${{
  setavatar "$f"
}}

# Chmod Command
cmd chmod %{{
  printf "Mode Bits: "
  read and

  for file in "$fx"
  do
    chmod $and $file
  done

  lf -remote 'send reload'
}}

# Make File Command
cmd mkfile ${{
  printf "File Name: "
  read and
  $EDITOR $and
}}

# Make Directory Command
cmd mkdir %{{
  printf "Directory Name: "
  read and
  mkdir $and

  lf -remote 'send reload'
}}

# Make File With Sudo Command
cmd sudomkfile ${{
  printf "File Name: "
  read and
  sudo $EDITOR $and
}}

# Delete Command
cmd delete ${{
  set -f
  printf "$fx\n"
  printf "delete?[y/n]"
  read and
  [ "$and" = "y" ] && rm -rf $fx

  lf -remote 'send reload'
}}

# Trash-cli Command
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}
    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
    files="${files#*;}"
    fi
  done

  lf -remote 'send reload'
}}

# Extract Command
cmd extract ${{
  un_rar() {
    if [ ! -f "/usr/bin/unrar" ]; then
      echo "ERROR: You need to install unrar to extract file"
      exit 1
    fi
	  destination="$(echo $1 | sed -e 's/.rar//')"
	  if [ ! -d "$destination" ]; then
		  mkdir "$destination"
	  fi
	  unrar e "$1" "$destination"
  }

  un_zip() {
    if [ ! -f "/usr/bin/unzip" ]; then
      echo "You need to install unzip to extract file"
      exit 1
    fi

    destination="$(echo $1 | sed -e 's/.zip//')"
    if [ ! -d "$destination" ]; then
      mkdir "$destination"
    fi
    unzip "$1" -d "$destination"
  }


  un_7z() {
    if [ ! -f "/usr/bin/7z" ]; then
      echo "ERROR: You need to install 7z to extract file"
      exit 1
    fi

    destination="$(echo $1 | sed -e 's/.7z//')"
    if [ ! -d "$destination" ]; then
      mkdir "$destination"
    fi
    7z x "$1" -o"$destination"
  }

  case "$f" in
    *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf "$f";;
    *.tar.gz|*.tgz) tar xzvf "$f";;
    *.tar.xz|*.txz) tar xJvf "$f";;
    *.zip) un_zip "$f" ;;
    *.rar) un_rar "$f" ;;
    *.7z) un_7z "$f" ;;
	  *) echo -e "Unsupported format" && exit 1 ;;
  esac
}}

# Zip Command
cmd zip %zip -r "$f" "$f"

# Tar Command
cmd tar %tar cvf "$f.tar" "$f"

# Archive Command
cmd achirve %{{
  printf "File Name: "
  read -r newname
  printf "Type? [1:zip | 2:rar | 3:tar]: "
  read -r type
    case "$type" in
    "1") zip "$newname" -r "$f" "$f";;
    "2") rar a -r -rr10p "$newname" "$f";;
    "3") tar cvf "$newname.tar" "$f";;
    "*") printf "Wrong choice";;
  esac
}}


