const MSG_ACTIONS={GET_ENABLED_BLOCKING_RULE_IDS:"@ZaDark:GET_ENABLED_BLOCKING_RULE_IDS",UPDATE_ENABLED_BLOCKING_RULE_IDS:"@ZaDark:UPDATE_ENABLED_BLOCKING_RULE_IDS"},RULE_IDS=["rules_block_typing","rules_block_delivered","rules_block_seen"],SETTINGS_RULE_KEYS={rules_block_typing:"enabledBlockTyping",rules_block_delivered:"enabledBlockDelivered",rules_block_seen:"enabledBlockSeen"},handleLoadRulesets=async()=>{const e=await chrome.storage.sync.get({enabledBlockTyping:!1,enabledBlockDelivered:!1,enabledBlockSeen:!1}),s=[],a=[];RULE_IDS.forEach(l=>{const t=SETTINGS_RULE_KEYS[l];t&&(e[t]?s.push(l):a.push(l))}),chrome.declarativeNetRequest.updateEnabledRulesets({enableRulesetIds:s,disableRulesetIds:a})};chrome.runtime.onInstalled.addListener(e=>{"install"===e.reason&&(chrome.tabs.create({url:"https://zadark.quaric.com/web/chrome"}),handleLoadRulesets()),"update"===e.reason&&handleLoadRulesets()}),chrome.runtime.onMessage.addListener((e,s,a)=>{const{action:l,payload:t}=e;if(l===MSG_ACTIONS.GET_ENABLED_BLOCKING_RULE_IDS&&chrome.declarativeNetRequest.getEnabledRulesets().then(e=>{a(e)}),l===MSG_ACTIONS.UPDATE_ENABLED_BLOCKING_RULE_IDS){const{enableRulesetIds:e,disableRulesetIds:s}=t,a={};Array.isArray(e)&&e.forEach(e=>{const s=SETTINGS_RULE_KEYS[e];s&&(a[s]=!0)}),Array.isArray(s)&&s.forEach(e=>{const s=SETTINGS_RULE_KEYS[e];s&&(a[s]=!1)}),chrome.storage.sync.set(a),chrome.declarativeNetRequest.updateEnabledRulesets({enableRulesetIds:e,disableRulesetIds:s})}return!0});